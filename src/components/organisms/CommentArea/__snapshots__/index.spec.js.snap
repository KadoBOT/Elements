exports[`test should render the CommentArea 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div>
    Loading...
</div>,
  "nodes": Array [
    <div>
      Loading...
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <CommentArea
        comment={Object {}}
        comments={false}
        errors={Object {}}
        fetchComments={[Function]}
        running={true} />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": CommentArea {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "comment": Object {},
          "comments": false,
          "errors": Object {},
          "fetchComments": [Function],
          "running": true,
        },
        "refs": Object {},
        "sendComment": [Function],
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div>
          Loading...
</div>,
        "_debugID": 2,
        "_renderedOutput": <div>
          Loading...
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <CommentArea
    comment={Object {}}
    comments={false}
    errors={Object {}}
    fetchComments={[Function]}
    running={true} />,
}
`;

exports[`test should render the CommentArea 2`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="comment-area">
    <About
        subtitle="Leave a Comment" />
    <CommentForm
        comment={Object {}}
        errors={Object {}}
        onChange={[Function]}
        onSubmit={[Function]} />
    <div
        className="comment-area__comments">
        
    </div>
</div>,
  "nodes": Array [
    <div
      className="comment-area">
      <About
            subtitle="Leave a Comment" />
      <CommentForm
            comment={Object {}}
            errors={Object {}}
            onChange={[Function]}
            onSubmit={[Function]} />
      <div
            className="comment-area__comments">
            
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <CommentArea
        comment={Object {}}
        comments={
                Object {
                        "results": Array [],
                      }
        }
        errors={Object {}}
        fetchComments={[Function]}
        handleForm={[Function]}
        running={false} />,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": CommentArea {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "comment": Object {},
          "comments": Object {
            "results": Array [],
          },
          "errors": Object {},
          "fetchComments": [Function],
          "handleForm": [Function],
          "running": false,
        },
        "refs": Object {},
        "sendComment": [Function],
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="comment-area">
          <About
                    subtitle="Leave a Comment" />
          <CommentForm
                    comment={Object {}}
                    errors={Object {}}
                    onChange={[Function]}
                    onSubmit={[Function]} />
          <div
                    className="comment-area__comments">
                    
          </div>
</div>,
        "_debugID": 4,
        "_renderedOutput": <div
          className="comment-area">
          <About
                    subtitle="Leave a Comment" />
          <CommentForm
                    comment={Object {}}
                    errors={Object {}}
                    onChange={[Function]}
                    onSubmit={[Function]} />
          <div
                    className="comment-area__comments">
                    
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <CommentArea
    comment={Object {}}
    comments={
        Object {
            "results": Array [],
          }
    }
    errors={Object {}}
    fetchComments={[Function]}
    handleForm={[Function]}
    running={false} />,
}
`;
